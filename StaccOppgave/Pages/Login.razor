@layout LoginLayout
@page "/"
@inject NavigationManager navigator
@inject UserService userService
@using StaccOppgave.Models
@using System.Text.Json

<h3>Login</h3>


    <div class="form-group">
        <label for="InputEmail">Email address</label>
        <input type="email" class="form-control" id="InputEmail" @bind="email">
    </div>
    <div class="form-group">
        <label for="InputPassword">Password</label>
        <input type="password" class="form-control" id="InputPassword" @bind="password">
    </div>
    <button type="submit" class="btn btn-primary" @onclick="login">Login</button>
    <div>
<a href="/signup">Dont have an account? Sign Up!</a>
    </div>
@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}



@code {
    private string? email;
    private string? password;
    private string? errorMessage;
    private bool userExists;
    private Account? account;

    private async Task login()
    {

        using (var client = new HttpClient())
        {
            try
            {


                var apiUrl = $"https://localhost:7064/User/GetUsers?email={Uri.EscapeDataString(email)}&password={Uri.EscapeDataString(password)}";


                var response = await client.GetAsync(apiUrl);


                if (response.IsSuccessStatusCode)
                {

                    var responseContent = await response.Content.ReadAsStringAsync();
                    User? user = JsonSerializer.Deserialize<User>(responseContent);

                    if (user != null)
                    {
                        userService.SetUserId(user.Userid);
                        userService.SetUserName(user.Username);

                    }


                    userExists = !string.IsNullOrWhiteSpace(responseContent);

                    if (userExists)
                    {
                        await GetAccount(user.Userid);
                        if (account != null)
                        {
                            navigator.NavigateTo("/home");
                        }
                        else
                        {
                            navigator.NavigateTo("/CreateAccount");
                        }
                    }
                    else
                    {

                        errorMessage = "User does not exist or invalid credentials.";
                    }
                }
                else
                {

                    errorMessage = "Login failed. Please check your email and password.";
                }
            }
            catch (Exception ex)
            {

                errorMessage = "An error occurred: " + ex.Message;
            }
        }
    }
    private async Task GetAccount(int userid)
    {
       
         
            try
            {
                using (var client = new HttpClient())
                {

                    var response = await client.GetAsync($"https://localhost:7064/Account/GetAccountForUser?userId={Uri.EscapeDataString(userid.ToString())}");
                    if (response.IsSuccessStatusCode)
                    {
                         account = await response.Content.ReadFromJsonAsync<Account>();

                    }
                }
            }
            catch (HttpRequestException ex)
            {
                errorMessage = ex.Message;
            }

        
    }
}

